{
    "audio": [
        {
            "name": "Background Audio",
            "uri": "background audio",
            "thumb": "/examples/audio/background/thumb.png",
            "version": "0.5.1",
            "tabs": [
                {
                    "name": "Info",
                    "id": "info",
                    "desc": "",
                    "src_file": "info.txt",
                    "language": "markdown",
                    "value": [
                        "Here is some text.",
                        "Lets go ahead and populate some stuff here.",
                        "You will want to do:",
                        "A.",
                        "B.",
                        "C.",
                        "    1.",
                        "    2.",
                        "D."
                    ]
                },
                {
                    "name": "Game State",
                    "id": "game-state",
                    "desc": "",
                    "src_file": "src/ts/scenes/game.ts",
                    "language": "typescript",
                    "value": [
                        "export default class GameScene extends Lightning.Scene {",
                        "",
                        "    public create() {",
                        "        /**",
                        "         * Create our variable to hold the audio",
                        "         * Create our audio using Lightning built in this.game.audio.load",
                        "         * Pass our key string for the audio",
                        "         * Pass our array of files to load",
                        "         * Set autoplay to false",
                        "         * Set loop to true",
                        "         * Set volumn to 1",
                        "         */",
                        "        let backgroundAudio = this.game.audio.load('background', ['/assets/audio.mp3'], false, true, 1);",
                        "",
                        "        /**",
                        "         * Call the play function on our audio variable.",
                        "         */",
                        "        backgroundAudio.play();",
                        "    }",
                        "}"
                    ]
                }
            ],
            "scriptSrc": "game.js",
            "url": "audio/background audio",
            "parent": "audio"
        },
        {
            "name": "Fade",
            "uri": "fade",
            "thumb": "/examples/audio/fade/thumb.png",
            "version": "0.5.1",
            "tabs": [
                {
                    "name": "Info",
                    "id": "info",
                    "desc": "",
                    "src_file": "info.txt",
                    "language": "markdown",
                    "value": [
                        "Here is some text.",
                        "Lets go ahead and populate some stuff here.",
                        "You will want to do:",
                        "A.",
                        "B.",
                        "C.",
                        "    1.",
                        "    2.",
                        "D."
                    ]
                },
                {
                    "name": "Game State",
                    "id": "game-state",
                    "desc": "",
                    "src_file": "src/ts/scenes/game.ts",
                    "language": "typescript",
                    "value": [
                        "export default class GameScene extends Lightning.Scene {",
                        "",
                        "    /**",
                        "     * Define a global boolean is the sound has been faded or not",
                        "     */",
                        "    private _isFaded:boolean;",
                        "",
                        "    public create() {",
                        "        /**",
                        "         * Load our game audio",
                        "         * Pass our key string for our sound",
                        "         * Pass an array of sounds we wish to load from the directory we have them saved to",
                        "         * Set autoplay to false",
                        "         * Set looping to false",
                        "         * Set our volumn to 1",
                        "         */",
                        "        this.game.audio.load('background', ['/assets/audio.mp3'], true, true, 1);",
                        "",
                        "        /**",
                        "         * Set our is faded boolean to false seeing as the audio has auto started and is not faded",
                        "         */",
                        "        this._isFaded = false;",
                        "",
                        "        /**",
                        "         * Create our text for our button",
                        "         * Set text x and y anchor to 0.5",
                        "         */",
                        "        let btnText:Lightning.Text = new Lightning.Text('Click To Fade Out!', <any>{fontSize: 18});",
                        "        btnText.anchor.x = 0.5;",
                        "        btnText.anchor.y = 0.5;",
                        "",
                        "",
                        "        /**",
                        "         * Create our geometry shape for our button",
                        "         */",
                        "        let shape: Lightning.Geometry = Lightning.Geometry.RoundRect(200, 100, 20, 0xffffff, 1);",
                        "",
                        "        /**",
                        "         * Create a texture from our shape",
                        "         */",
                        "        let texture: Lightning.Texture = this.game.generateTexture(shape);",
                        "",
                        "        /**",
                        "         * Create our button sprite from our texture passing game context and texture",
                        "         * Set our buttons x and y anchor to 0.5",
                        "         * Set our buttons x and y position to game center",
                        "         * Add text as a child to our button sprite",
                        "         * Add button to game world",
                        "         */",
                        "        let button: Lightning.Button = new Lightning.Button(this.game, texture);",
                        "        button.setAnchor(0.5);",
                        "        button.x = this.game.center.x;",
                        "        button.y = this.game.center.y;",
                        "        button.addChild(btnText);",
                        "        this.add(button);",
                        "",
                        "        /**",
                        "         * Create an on mouse down function",
                        "         * Pass our button click function inside our lexical function",
                        "         * We pass two variables to our button click function which are button, and btnText",
                        "         */",
                        "        button.on('mousedown', () => {",
                        "            this.btnClick(button, btnText);",
                        "        })",
                        "        ",
                        "    }",
                        "",
                        "    /**",
                        "     * Create our function to fire on button click which accepts button and btnText ",
                        "     * ",
                        "     */",
                        "    private btnClick(button, btnText) {",
                        "        /**",
                        "         * If statement to check if our is faded boolean is false if it is continue",
                        "         * Set our button tint to red",
                        "         * Change our btnText text",
                        "         * Call our fade function on our sound with the key string of 'background' fade accepts three required params. Volumn from, Volumn to, and speed in MS",
                        "         * Set our is faded boolean to true",
                        "         * ",
                        "         * Next we have our Else If is faded boolean is true if it is continue",
                        "         * Change our button tint to white",
                        "         * Change our btnText text",
                        "         * Call our fade function on our sound with the key string of 'background' changing the paramns to go from 0 to 1 at the same speed",
                        "         * Set our is faded boolean back to false",
                        "         */",
                        "        if(this._isFaded == false) {",
                        "            button.tint = 0xff0000;",
                        "            btnText.text = \"Click Me To Fade In!\"",
                        "            this.game.audio.sound('background').fade(1.0, 0.0, 1500);",
                        "            this._isFaded = true;",
                        "        } else if(this._isFaded == true) {",
                        "            button.tint = 0xffffff;;",
                        "            btnText.text = \"Click Me To Fade Out!\"",
                        "            this.game.audio.sound('background').fade(0.0, 1.0, 1500);",
                        "            this._isFaded = false;",
                        "        }",
                        "            ",
                        "    }",
                        "}"
                    ]
                }
            ],
            "scriptSrc": "game.js",
            "url": "audio/fade",
            "parent": "audio"
        },
        {
            "name": "On Click Sound",
            "uri": "on click sound",
            "thumb": "/examples/audio/on click/thumb.png",
            "version": "0.5.1",
            "tabs": [
                {
                    "name": "Info",
                    "id": "info",
                    "desc": "",
                    "src_file": "info.txt",
                    "language": "markdown",
                    "value": [
                        "Here is some text.",
                        "Lets go ahead and populate some stuff here.",
                        "You will want to do:",
                        "A.",
                        "B.",
                        "C.",
                        "    1.",
                        "    2.",
                        "D."
                    ]
                },
                {
                    "name": "Game State",
                    "id": "game-state",
                    "desc": "",
                    "src_file": "src/ts/scenes/game.ts",
                    "language": "typescript",
                    "value": [
                        "export default class GameScene extends Lightning.Scene {",
                        "",
                        "    public create() {",
                        "",
                        "        /**",
                        "         * Load our game audio",
                        "         * Pass our key string for our sound",
                        "         * Pass an array of sounds we wish to load from the directory we have them saved to",
                        "         * Set autoplay to false",
                        "         * Set looping to false",
                        "         * Set our volumn to 1",
                        "         */",
                        "        this.game.audio.load('boom', ['/assets/boom.wav'], false, false, 1);",
                        "",
                        "        /**",
                        "         * Create our text for our button",
                        "         * Set text x and y anchor to 0.5",
                        "         */",
                        "        let text:Lightning.Text = new Lightning.Text('Click Me!', <any>{fontSize: 24});",
                        "        text.anchor.x = 0.5;",
                        "        text.anchor.y = 0.5;",
                        "",
                        "",
                        "        /**",
                        "         * Create our geometry shape for our button",
                        "         */",
                        "        let shape: Lightning.Geometry = Lightning.Geometry.RoundRect(200, 100, 20, 0xffffff, 1);",
                        "",
                        "        /**",
                        "         * Create a texture from our shape",
                        "         */",
                        "        let texture: Lightning.Texture = this.game.generateTexture(shape);",
                        "",
                        "        /**",
                        "         * Create our button sprite from our texture passing game context and texture",
                        "         * Set our buttons x and y anchor to 0.5",
                        "         * Set our buttons x and y position to game center",
                        "         * Add text as a child to our button sprite",
                        "         * Add button to game world",
                        "         */",
                        "        let button: Lightning.Button = new Lightning.Button(this.game, texture);",
                        "        button.setAnchor(0.5);",
                        "        button.x = this.game.center.x;",
                        "        button.y = this.game.center.y;",
                        "        button.addChild(text);",
                        "        this.add(button);",
                        "",
                        "        /**",
                        "         * Create an on mouse down function",
                        "         * Pass our button click function inside our lexical function",
                        "         */",
                        "        button.on('mousedown', () => {",
                        "            this.btnClick();",
                        "        })",
                        "        ",
                        "    }",
                        "",
                        "    /**",
                        "     * Create our function to fire on button click",
                        "     * Play our sound when function is fired",
                        "     */",
                        "    private btnClick() {",
                        "            this.game.audio.sound('boom').play();",
                        "    }",
                        "}"
                    ]
                }
            ],
            "scriptSrc": "game.js",
            "url": "audio/on click sound",
            "parent": "audio"
        },
        {
            "name": "Pause Sound",
            "uri": "pause sound",
            "thumb": "/examples/audio/pause/thumb.png",
            "version": "0.5.1",
            "tabs": [
                {
                    "name": "Info",
                    "id": "info",
                    "desc": "",
                    "src_file": "info.txt",
                    "language": "markdown",
                    "value": [
                        "Here is some text.",
                        "Lets go ahead and populate some stuff here.",
                        "You will want to do:",
                        "A.",
                        "B.",
                        "C.",
                        "    1.",
                        "    2.",
                        "D."
                    ]
                },
                {
                    "name": "Game State",
                    "id": "game-state",
                    "desc": "",
                    "src_file": "src/ts/scenes/game.ts",
                    "language": "typescript",
                    "value": [
                        "export default class GameScene extends Lightning.Scene {",
                        "",
                        "    /**",
                        "     * Create global vaiable to hold our is playing boolean",
                        "     */",
                        "    private _isPlaying:boolean;",
                        "",
                        "    public create() {",
                        "",
                        "        /**",
                        "         * Load our game audio",
                        "         * Pass our key string for our sound",
                        "         * Pass an array of sounds we wish to load from the directory we have them saved to",
                        "         * Set autoplay to true",
                        "         * Set looping to true",
                        "         * Set our volumn to 1",
                        "         */",
                        "        this.game.audio.load('background', ['/assets/audio.mp3'], true, true, 1);",
                        "",
                        "        /**",
                        "         * Set global is playing boolean to true since we set autoplay to true and our sound is playing",
                        "         */",
                        "        this._isPlaying = true;",
                        "",
                        "        /**",
                        "         * Create our text for our button",
                        "         * Set text x and y anchor to 0.5",
                        "         */",
                        "        let buttonText:Lightning.Text = new Lightning.Text('Pause!', <any>{fontSize: 24});",
                        "        buttonText.anchor.x = 0.5;",
                        "        buttonText.anchor.y = 0.5;",
                        "",
                        "",
                        "        /**",
                        "         * Create our geometry shape for our button",
                        "         */",
                        "        let shape: Lightning.Geometry = Lightning.Geometry.RoundRect(200, 100, 20, 0xffffff, 1);",
                        "",
                        "        /**",
                        "         * Create a texture from our shape",
                        "         */",
                        "        let texture: Lightning.Texture = this.game.generateTexture(shape);",
                        "",
                        "        /**",
                        "         * Create our button sprite from our texture passing game context and texture",
                        "         * Set our buttons x and y anchor to 0.5",
                        "         * Set our buttons x and y position to game center",
                        "         * Add text as a child to our button sprite",
                        "         * Add button to game world",
                        "         */",
                        "        let button: Lightning.Button = new Lightning.Button(this.game, texture);",
                        "        button.setAnchor(0.5);",
                        "        button.x = this.game.center.x;",
                        "        button.y = this.game.center.y;",
                        "        button.addChild(buttonText);",
                        "        this.add(button);",
                        "",
                        "        /**",
                        "         * Create an on mouse down function",
                        "         * Pass our button click function inside our lexical function",
                        "         * We pass two variables to our function, the button, and the button text",
                        "         */",
                        "        button.on('mousedown', () => {",
                        "            this.btnClick(button, buttonText);",
                        "        })",
                        "        ",
                        "    }",
                        "",
                        "    /**",
                        "     * Create our function to fire on button click",
                        "     * ",
                        "     */",
                        "    private btnClick(button,buttonText) {",
                        "        /**",
                        "         * Create if statement to trigger if our is playing boolean is true when button is clicked",
                        "         * Pause our game sound with key we pass from the creation of the audio",
                        "         * Change the tint of our button to show it has been clicked to pause",
                        "         * Change our text from 'Pause!' to 'Unpause!'",
                        "         * Set our is playing boolean to false since it has now been muted",
                        "         * ",
                        "         * Else If statement to trigger if our is playing boolean is false when button is clicked",
                        "         * Unpause our game sound with key we pass from the creation of the audio",
                        "         * Change the tint of our button to show it has been clicked to pause",
                        "         * Change our text from 'Unpause!' back to 'Pause!'",
                        "         * Set our is playing boolean back to true since the game audio has now been unmuted.",
                        "         */",
                        "        if(this._isPlaying == true) {",
                        "            this.game.audio.sound('background').pause();",
                        "            button.tint = 0xff0000;",
                        "            buttonText.text = 'Unpause!';",
                        "            this._isPlaying = false;",
                        "        }else if(this._isPlaying == false){",
                        "            button.tint = 0xffffff;",
                        "            buttonText.text = 'Pause!'; ",
                        "            this.game.audio.sound('background').play();           ",
                        "            this._isPlaying = true;",
                        "            ",
                        "        }",
                        "            ",
                        "    }",
                        "}"
                    ]
                }
            ],
            "scriptSrc": "game.js",
            "url": "audio/pause sound",
            "parent": "audio"
        },
        {
            "name": "Rate",
            "uri": "rate",
            "thumb": "/examples/audio/rate/thumb.png",
            "version": "0.5.1",
            "tabs": [
                {
                    "name": "Info",
                    "id": "info",
                    "desc": "",
                    "src_file": "info.txt",
                    "language": "markdown",
                    "value": [
                        "Here is some text.",
                        "Lets go ahead and populate some stuff here.",
                        "You will want to do:",
                        "A.",
                        "B.",
                        "C.",
                        "    1.",
                        "    2.",
                        "D."
                    ]
                },
                {
                    "name": "Game State",
                    "id": "game-state",
                    "desc": "",
                    "src_file": "src/ts/scenes/game.ts",
                    "language": "typescript",
                    "value": [
                        "export default class GameScene extends Lightning.Scene {",
                        "",
                        "    /**",
                        "     * Define a global rate variable for our rate to  1.",
                        "     */",
                        "    private _rate:number = 1;",
                        "",
                        "    public create() {",
                        "        /**",
                        "         * Load our game audio",
                        "         * Pass our key string for our sound",
                        "         * Pass an array of sounds we wish to load from the directory we have them saved to",
                        "         * Set autoplay to true",
                        "         * Set looping to true",
                        "         * Set our rate to our predefined rate variable which is set to 1",
                        "         */",
                        "        // this.game.audio.load('background', ['/assets/audio.mp3'], false, true, this._rate);",
                        "        let backgroundSound = this.game.audio.load('background', ['/assets/audio.mp3'], true, true, this._rate);",
                        "",
                        "        /**",
                        "         * Create our text for our button",
                        "         * Set text x and y anchor to 0.5",
                        "         */",
                        "        let btnText:Lightning.Text = new Lightning.Text('Speed: 1', <any>{fontSize: 18});",
                        "        btnText.anchor.x = 0.5;",
                        "        btnText.anchor.y = 0.5;",
                        "",
                        "",
                        "        /**",
                        "         * Create our geometry shape for our button",
                        "         */",
                        "        let shape: Lightning.Geometry = Lightning.Geometry.RoundRect(200, 100, 20, 0xffffff, 1);",
                        "",
                        "        /**",
                        "         * Create a texture from our shape",
                        "         */",
                        "        let texture: Lightning.Texture = this.game.generateTexture(shape);",
                        "",
                        "        /**",
                        "         * Create our button sprite from our texture passing game context and texture",
                        "         * Set our buttons x and y anchor to 0.5",
                        "         * Set our buttons x and y position to game center",
                        "         * Add text as a child to our button sprite",
                        "         * Add button to game world",
                        "         */",
                        "        let button: Lightning.Button = new Lightning.Button(this.game, texture);",
                        "        button.setAnchor(0.5);",
                        "        button.x = this.game.center.x;",
                        "        button.y = this.game.center.y;",
                        "        button.addChild(btnText);",
                        "        this.add(button);",
                        "",
                        "        /**",
                        "         * Create an on mouse down function",
                        "         * Pass our button click function inside our lexical function",
                        "         * We pass two variables to our button click function which are button, and btnText",
                        "         */",
                        "        button.on('mousedown', () => {",
                        "            this.btnClick(button, btnText);",
                        "        })",
                        "        ",
                        "    }",
                        "",
                        "    /**",
                        "     * Create our function to fire on button click which accepts button and btnText ",
                        "     * ",
                        "     */",
                        "    private btnClick(button, btnText) {",
                        "        /**",
                        "         * When the function is fired increase our rate vaiable by 0.5",
                        "         * Create our if statement, if our rate variable is larger than 1.5 then set the rate to 0.5",
                        "         */",
                        "        this._rate += 0.5;",
                        "        if(this._rate > 1.5) {",
                        "            this._rate = 0.5;",
                        "        }",
                        "",
                        "        /**",
                        "         * Set our rate to the varibale above",
                        "         * Change button text to \"Spped:\" + whatever our rate is currently at",
                        "         */",
                        "",
                        "        this.game.audio.sound('background').rate(this._rate);",
                        "        btnText.text = \"Speed:\" + this._rate;",
                        "    }",
                        "}"
                    ]
                }
            ],
            "scriptSrc": "game.js",
            "url": "audio/rate",
            "parent": "audio"
        }
    ],
    "geometry": [
        {
            "name": "Circle",
            "uri": "circle",
            "thumb": "/examples/geometry/circle/thumb.png",
            "version": "0.5.1",
            "tabs": [
                {
                    "name": "Info",
                    "id": "info",
                    "desc": "",
                    "src_file": "info.txt",
                    "language": "markdown",
                    "value": [
                        "Here is some text.",
                        "Lets go ahead and populate some stuff here.",
                        "You will want to do:",
                        "A.",
                        "B.",
                        "C.",
                        "    1.",
                        "    2.",
                        "D."
                    ]
                },
                {
                    "name": "Game State",
                    "id": "game-state",
                    "desc": "",
                    "src_file": "src/ts/scenes/game.ts",
                    "language": "typescript",
                    "value": [
                        "export default class GameScene extends Lightning.Scene {",
                        "",
                        "    public create() {",
                        "        /**",
                        "         * Create our shape using Lightning Geometry Circle function",
                        "         * Inside our function pass our radius, tint, and alpha",
                        "         */",
                        "        let shape:Lightning.Geometry =  Lightning.Geometry.Circle(50, 0xffffff, 1);",
                        "",
                        "        //Create a texture from our Geometry shape.",
                        "        let texture:Lightning.Texture = this.game.generateTexture(shape);",
                        "        ",
                        "        /**",
                        "         * Create our sprite from our texture",
                        "         * Set sprite x and y positions  to game center",
                        "         * Add sprite to our game world",
                        "         */",
                        "        let sprite:Lightning.Sprite = new Lightning.Sprite(this.game.texture(texture));",
                        "            sprite.x = this.game.center.x;",
                        "            sprite.y = this.game.center.y;",
                        "            this.add(sprite);",
                        "    }",
                        "}"
                    ]
                }
            ],
            "scriptSrc": "game.js",
            "url": "geometry/circle",
            "parent": "geometry"
        },
        {
            "name": "Rectangle",
            "uri": "rectangle",
            "thumb": "/examples/geometry/rectangle/thumb.png",
            "version": "0.5.1",
            "tabs": [
                {
                    "name": "Info",
                    "id": "info",
                    "desc": "",
                    "src_file": "info.txt",
                    "language": "markdown",
                    "value": [
                        "Here is some text.",
                        "Lets go ahead and populate some stuff here.",
                        "You will want to do:",
                        "A.",
                        "B.",
                        "C.",
                        "    1.",
                        "    2.",
                        "D."
                    ]
                },
                {
                    "name": "Game State",
                    "id": "game-state",
                    "desc": "",
                    "src_file": "src/ts/scenes/game.ts",
                    "language": "typescript",
                    "value": [
                        "export default class GameScene extends Lightning.Scene {",
                        "",
                        "    public create() {",
                        "        /**",
                        "         * Create our shape using Lightning Geometry Rect function",
                        "         * Inside our function pass our width, height, tint, and alpha",
                        "         */",
                        "        let shape:Lightning.Geometry =  Lightning.Geometry.Rect(100, 50, 0xffffff, 1);",
                        "",
                        "        //Create a texture from our Geometry shape.",
                        "        let texture:Lightning.Texture = this.game.generateTexture(shape);",
                        "        ",
                        "        /**",
                        "         * Create our sprite from our texture",
                        "         * Set sprite x and y positions  to game center",
                        "         * Add sprite to our game world",
                        "         */",
                        "        let sprite:Lightning.Sprite = new Lightning.Sprite(this.game.texture(texture));",
                        "            sprite.x = this.game.center.x;",
                        "            sprite.y = this.game.center.y;",
                        "            this.add(sprite);",
                        "    }",
                        "}"
                    ]
                }
            ],
            "scriptSrc": "game.js",
            "url": "geometry/rectangle",
            "parent": "geometry"
        },
        {
            "name": "Round Rectangle",
            "uri": "round rectangle",
            "thumb": "/examples/geometry/round rectangle/thumb.png",
            "version": "0.5.1",
            "tabs": [
                {
                    "name": "Info",
                    "id": "info",
                    "desc": "",
                    "src_file": "info.txt",
                    "language": "markdown",
                    "value": [
                        "Here is some text.",
                        "Lets go ahead and populate some stuff here.",
                        "You will want to do:",
                        "A.",
                        "B.",
                        "C.",
                        "    1.",
                        "    2.",
                        "D."
                    ]
                },
                {
                    "name": "Game State",
                    "id": "game-state",
                    "desc": "",
                    "src_file": "src/ts/scenes/game.ts",
                    "language": "typescript",
                    "value": [
                        "export default class GameScene extends Lightning.Scene {",
                        "",
                        "    public create() {",
                        "        /**",
                        "         * Create our shape using Lightning Geometry RoundRect function",
                        "         * Inside our function pass our width, height, radius, tint, and alpha",
                        "         */",
                        "        let shape:Lightning.Geometry =  Lightning.Geometry.RoundRect(200, 100, 20, 0xffffff, 1);",
                        "",
                        "        //Create a texture from our Geometry shape.",
                        "        let texture:Lightning.Texture = this.game.generateTexture(shape);",
                        "        ",
                        "        /**",
                        "         * Create our sprite from our texture",
                        "         * Set sprite x and y positions  to game center",
                        "         * Add sprite to our game world",
                        "         */",
                        "        let sprite:Lightning.Sprite = new Lightning.Sprite(this.game.texture(texture));",
                        "            sprite.x = this.game.center.x;",
                        "            sprite.y = this.game.center.y;",
                        "            this.add(sprite);",
                        "    }",
                        "}"
                    ]
                }
            ],
            "scriptSrc": "game.js",
            "url": "geometry/round rectangle",
            "parent": "geometry"
        },
        {
            "name": "Square",
            "uri": "square",
            "thumb": "/examples/geometry/square/thumb.png",
            "version": "0.5.1",
            "tabs": [
                {
                    "name": "Info",
                    "id": "info",
                    "desc": "",
                    "src_file": "info.txt",
                    "language": "markdown",
                    "value": [
                        "Here is some text.",
                        "Lets go ahead and populate some stuff here.",
                        "You will want to do:",
                        "A.",
                        "B.",
                        "C.",
                        "    1.",
                        "    2.",
                        "D."
                    ]
                },
                {
                    "name": "Game State",
                    "id": "game-state",
                    "desc": "",
                    "src_file": "src/ts/scenes/game.ts",
                    "language": "typescript",
                    "value": [
                        "export default class GameScene extends Lightning.Scene {",
                        "",
                        "    public create() {",
                        "        /**",
                        "         * Create our shape using Lightning Geometry Square function",
                        "         * Inside our function pass our dimension, tint, and alpha",
                        "         */",
                        "        let shape:Lightning.Geometry =  Lightning.Geometry.Square(100, 0xffffff, 1);",
                        "",
                        "        //Create a texture from our Geometry shape.",
                        "        let texture:Lightning.Texture = this.game.generateTexture(shape);",
                        "        ",
                        "        /**",
                        "         * Create our sprite from our texture",
                        "         * Set sprite x and y positions  to game center",
                        "         * Add sprite to our game world",
                        "         */",
                        "        let sprite:Lightning.Sprite = new Lightning.Sprite(this.game.texture(texture));",
                        "            sprite.x = this.game.center.x;",
                        "            sprite.y = this.game.center.y;",
                        "            this.add(sprite);",
                        "    }",
                        "}"
                    ]
                }
            ],
            "scriptSrc": "game.js",
            "url": "geometry/square",
            "parent": "geometry"
        },
        {
            "name": "Triangle",
            "uri": "triangle",
            "thumb": "/examples/geometry/triangle/thumb.png",
            "version": "0.5.1",
            "tabs": [
                {
                    "name": "Info",
                    "id": "info",
                    "desc": "",
                    "src_file": "info.txt",
                    "language": "markdown",
                    "value": [
                        "Here is some text.",
                        "Lets go ahead and populate some stuff here.",
                        "You will want to do:",
                        "A.",
                        "B.",
                        "C.",
                        "    1.",
                        "    2.",
                        "D."
                    ]
                },
                {
                    "name": "Game State",
                    "id": "game-state",
                    "desc": "",
                    "src_file": "src/ts/scenes/game.ts",
                    "language": "typescript",
                    "value": [
                        "export default class GameScene extends Lightning.Scene {",
                        "",
                        "    public create() {",
                        "        /**",
                        "         * Create our shape using Lightning Geometry Trianle function",
                        "         * Inside our function pass our lengths for our sides, tint, and alpha",
                        "         */",
                        "        let shape:Lightning.Geometry =  Lightning.Geometry.Triangle(200, 200, 0xffffff, 1);",
                        "",
                        "        //Create a texture from our Geometry shape.",
                        "        let texture:Lightning.Texture = this.game.generateTexture(shape);",
                        "        ",
                        "        /**",
                        "         * Create our sprite from our texture",
                        "         * Set sprite x and y positions  to game center",
                        "         * Add sprite to our game world",
                        "         */",
                        "        let sprite:Lightning.Sprite = new Lightning.Sprite(this.game.texture(texture));",
                        "            sprite.x = this.game.center.x;",
                        "            sprite.y = this.game.center.y;",
                        "            this.add(sprite);",
                        "    }",
                        "}"
                    ]
                }
            ],
            "scriptSrc": "game.js",
            "url": "geometry/triangle",
            "parent": "geometry"
        }
    ],
    "input": [
        {
            "name": "Click",
            "uri": "click",
            "thumb": "/examples/input/click/thumb.png",
            "version": "0.5.1",
            "tabs": [
                {
                    "name": "Info",
                    "id": "info",
                    "desc": "",
                    "src_file": "info.txt",
                    "language": "markdown",
                    "value": [
                        "Here is some text.",
                        "Lets go ahead and populate some stuff here.",
                        "You will want to do:",
                        "A.",
                        "B.",
                        "C.",
                        "    1.",
                        "    2.",
                        "D."
                    ]
                },
                {
                    "name": "Game State",
                    "id": "game-state",
                    "desc": "",
                    "src_file": "src/ts/scenes/game.ts",
                    "language": "typescript",
                    "value": [
                        "export default class GameScene extends Lightning.Scene {",
                        "",
                        "    public create() {",
                        "        //Define graphics",
                        "        let graphics: Lightning.Graphics = Lightning.Geometry.Square(100, 0xffffff);",
                        "",
                        "        //Create a texture from our graphics opject",
                        "        let texture: Lightning.Texture = graphics.generateCanvasTexture();",
                        "",
                        "        /**",
                        "         * Create text to append to our sprite that is draggable",
                        "         * Set text anchor x and y to center",
                        "         */",
                        "        let spriteText: Lightning.Text = new Lightning.Text('Click Me!', <any>{ fontSize: 24, fill: 0x000000",
                        "        });",
                        "        spriteText.anchor.x = 0.5;",
                        "        spriteText.anchor.y = 0.5;",
                        "",
                        "        /**",
                        "         * Create our sprite",
                        "         * Set our x and y positions for game center",
                        "         * Set our sprites anchor to 0.5 which is center of the sprite",
                        "         * Add out text to our sprite to tell everyone its clickable",
                        "         * Add our sprite to game world",
                        "         */",
                        "        let sprite: Lightning.Sprite = new Lightning.Sprite(texture);",
                        "        sprite.x = this.game.center.x;",
                        "        sprite.y = this.game.center.y;",
                        "        sprite.setAnchor(0.5);",
                        "        sprite.interactive = true;",
                        "        sprite.addChild(spriteText);",
                        "        this.add(sprite);",
                        "        ",
                        "",
                        "        /**",
                        "         * Create an on mouse down function",
                        "         * Pass our button click function inside our lexical function which accepts our sprite",
                        "         */",
                        "        sprite.on('mouseup', () => {",
                        "            this.spriteClick(sprite);",
                        "        });",
                        "    }",
                        "",
                        "    /**",
                        "     * Create our function to fire on button click",
                        "     */",
                        "    spriteClick(sprite) {",
                        "",
                        "        /**",
                        "         * Create an empty array to hold our randomly generated hex color for our button",
                        "         */",
                        "        let arr:Array<number | string> = [];",
                        "",
                        "        /**",
                        "         * Create a for loop that triggers 6 times",
                        "         */",
                        "        for(let i = 0; i < 6; i++) {",
                        "            /**",
                        "             * For each loop create a random number between 0, 9 using Lightning Maths",
                        "             */",
                        "            let ranNum = Lightning.Maths.rngInt(0, 9);",
                        "",
                        "            /**",
                        "             * Push that random number to the array",
                        "             */",
                        "            arr.push(ranNum);",
                        "        }",
                        "",
                        "        /**",
                        "         * Prefix our array of 6 numbers with 0x to tell the renderer that its a color code",
                        "         */",
                        "        arr.unshift('0x');",
                        "",
                        "        /**",
                        "         * Define a variable called color and use javascripts array join functionality to just have a space between numbers instead of a comma",
                        "         */",
                        "        let color = arr.join(\"\");",
                        "",
                        "        /**",
                        "         * Set our sprites tint equal to the random color generated",
                        "         */",
                        "        sprite.tint = color;",
                        "    }",
                        "}"
                    ]
                }
            ],
            "scriptSrc": "game.js",
            "url": "input/click",
            "parent": "input"
        },
        {
            "name": "Drag",
            "uri": "drag",
            "thumb": "/examples/input/drag/thumb.png",
            "version": "0.5.1",
            "tabs": [
                {
                    "name": "Info",
                    "id": "info",
                    "desc": "",
                    "src_file": "info.txt",
                    "language": "markdown",
                    "value": [
                        "Here is some text.",
                        "Lets go ahead and populate some stuff here.",
                        "You will want to do:",
                        "A.",
                        "B.",
                        "C.",
                        "    1.",
                        "    2.",
                        "D."
                    ]
                },
                {
                    "name": "Game State",
                    "id": "game-state",
                    "desc": "",
                    "src_file": "src/ts/scenes/game.ts",
                    "language": "typescript",
                    "value": [
                        "export default class GameScene extends Lightning.Scene {",
                        "",
                        "    public create() {",
                        "        //Define graphics",
                        "        let graphics: Lightning.Graphics = Lightning.Geometry.Square(100, 0xffffff);",
                        "",
                        "        //Create a texture from our graphics opject",
                        "        let texture: Lightning.Texture = graphics.generateCanvasTexture();",
                        "",
                        "        /**",
                        "         * Create text to append to our sprite that is draggable",
                        "         * Set text anchor x and y to center",
                        "         */",
                        "        let spriteText: Lightning.Text = new Lightning.Text('Drag Me!', <any>{ fontSize: 24, fill: 0x000000});",
                        "        spriteText.anchor.x = 0.5;",
                        "        spriteText.anchor.y = 0.5;",
                        "",
                        "        /**",
                        "         * Create our sprite",
                        "         * Set our x and y positions for game center",
                        "         * Set our sprites anchor to 0.5 which is center of the sprite",
                        "         * Call Lightnings built in enable drag function on our sprite",
                        "         * Add out text to our sprite to tell everyone its draggable",
                        "         * Add our sprite to game world",
                        "         */",
                        "        let sprite: Lightning.Sprite = new Lightning.Sprite(texture);",
                        "        sprite.x = this.game.center.x;",
                        "        sprite.y = this.game.center.y;",
                        "        sprite.setAnchor(0.5);",
                        "        sprite.enableDrag();",
                        "        sprite.addChild(spriteText);",
                        "        this.add(sprite);",
                        "",
                        "    }",
                        "}"
                    ]
                }
            ],
            "scriptSrc": "game.js",
            "url": "input/drag",
            "parent": "input"
        }
    ],
    "maths": [
        {
            "name": "Distance Between",
            "uri": "distance-between",
            "thumb": "/examples/maths/distance-between/thumb.png",
            "version": "0.5.1",
            "tabs": [
                {
                    "name": "Info",
                    "id": "info",
                    "desc": "",
                    "src_file": "info.txt",
                    "language": "markdown",
                    "value": [
                        "Here is some text.",
                        "Lets go ahead and populate some stuff here.",
                        "You will want to do:",
                        "A.",
                        "B.",
                        "C.",
                        "    1.",
                        "    2.",
                        "D."
                    ]
                },
                {
                    "name": "Game State",
                    "id": "game-state",
                    "desc": "",
                    "src_file": "src/ts/scenes/game.ts",
                    "language": "typescript",
                    "value": [
                        "export default class GameScene extends Lightning.Scene {",
                        "",
                        "    /**",
                        "     * Set global variables to house our distance between number, text, and sprites",
                        "     */",
                        "    private _distanceBetween: number;",
                        "    private _distanceText: Lightning.Text;",
                        "    private _sprite: Lightning.Sprite",
                        "    private _sprite2: Lightning.Sprite",
                        "",
                        "    public create() {",
                        "        /**",
                        "         * Create our shape using Lightning Geometry Square function",
                        "         * Inside our function pass our dimension, tint, and alpha",
                        "         */",
                        "        let shape: Lightning.Geometry = Lightning.Geometry.Square(100, 0xffffff, 1);",
                        "",
                        "        //Create a texture from our Geometry shape.",
                        "        let texture: Lightning.Texture = this.game.generateTexture(shape);",
                        "",
                        "        /**",
                        "         * Create our sprite from our texture",
                        "         * Set sprite x and y positions ",
                        "         * Set our sprites x and y anchor to center",
                        "         * Add sprite to our game world",
                        "         */",
                        "        this._sprite = new Lightning.Sprite(this.game.texture(texture));",
                        "        this._sprite.x = this.game.width * 0.1;",
                        "        this._sprite.y = this.game.height * 0.3;",
                        "        this._sprite.setAnchor(0.5);",
                        "        this.add(this._sprite);",
                        "",
                        "        /**",
                        "         * Create text to append to our second sprite that is draggable",
                        "         * Set text anchor x and y to center",
                        "         */",
                        "        let spriteText: Lightning.Text = new Lightning.Text('Drag Me!', <any>{ fontSize: 24, fill: 0xffffff});",
                        "        spriteText.anchor.x = 0.5;",
                        "        spriteText.anchor.y = 0.5;",
                        "",
                        "        /**",
                        "         * Create our second sprite from our texture",
                        "         * Set sprite x and y positions to random positions between 0 and width/height minus a margin so it doesnt appear offscreen",
                        "         * Set our sprites tint to red",
                        "         * Set our sprites x and y anchor to center",
                        "         * Set our sprite to be interactive",
                        "         * Enable drag on our sprite ",
                        "         * Add text child to sprite",
                        "         * Add sprite to our game world",
                        "         */",
                        "        this._sprite2 = new Lightning.Sprite(this.game.texture(texture));",
                        "        this._sprite2.x = Lightning.Maths.rngInt(0, this.game.width - 100);",
                        "        this._sprite2.y = Lightning.Maths.rngInt(0, this.game.height - 300)",
                        "        this._sprite2.tint = 0xff0000;",
                        "        this._sprite2.setAnchor(0.5);",
                        "        this._sprite2.interactive = true;",
                        "        this._sprite2.enableDrag();",
                        "        this._sprite2.addChild(spriteText);",
                        "        this.add(this._sprite2);",
                        "",
                        "        /**",
                        "         * Create text to show our distance between two sprites",
                        "         * Set x and y positions of our distance text",
                        "         * Add distance text to our world",
                        "         */",
                        "        this._distanceText = new Lightning.Text('Distance: ' + this._distanceBetween + 'px', <any>{ fontSize: 24, fill: 0xffffff });",
                        "        this._distanceText.x = this.game.width * 0.5;",
                        "        this._distanceText.y = this.game.height * 0.1;",
                        "        this.add(this._distanceText);",
                        "",
                        "    }",
                        "",
                        "    update() {",
                        "        /**",
                        "         * Update our distance between number on every tick of update loop using our distanceBetween function ",
                        "         * Pass in the two objects we want to check the distance between in our case our two sprites",
                        "         */",
                        "        this._distanceBetween = Lightning.Maths.distanceBetween(this._sprite, this._sprite2);",
                        "",
                        "        /**",
                        "         * Update our distance text per update frame to update the text while dragging our second sprite.",
                        "         */",
                        "        this._distanceText.text = 'Distance: ' + this._distanceBetween + ' px';",
                        "",
                        "    }",
                        "}"
                    ]
                }
            ],
            "scriptSrc": "game.js",
            "url": "maths/distance-between",
            "parent": "maths"
        },
        {
            "name": "Random Spawn",
            "uri": "random-spawn",
            "thumb": "/examples/maths/random-spawn/thumb.png",
            "version": "0.5.1",
            "tabs": [
                {
                    "name": "Info",
                    "id": "info",
                    "desc": "",
                    "src_file": "info.txt",
                    "language": "markdown",
                    "value": [
                        "Here is some text.",
                        "Lets go ahead and populate some stuff here.",
                        "You will want to do:",
                        "A.",
                        "B.",
                        "C.",
                        "    1.",
                        "    2.",
                        "D."
                    ]
                },
                {
                    "name": "Game State",
                    "id": "game-state",
                    "desc": "",
                    "src_file": "src/ts/scenes/game.ts",
                    "language": "typescript",
                    "value": [
                        "export default class GameScene extends Lightning.Scene {",
                        "",
                        "    public create() {",
                        "",
                        "        let text:Lightning.Text = new Lightning.Text('Refresh to change spawn.', <any>{fontSize: 32, fill: 0xffffff});",
                        "        text.x = this.game.width * 0.5;",
                        "        text.y = this.game.height * 0.050;",
                        "        this.add(text);",
                        "        /**",
                        "         * Create our shape using Lightning Geometry Square function",
                        "         * Inside our function pass our dimension, tint, and alpha",
                        "         */",
                        "        let shape: Lightning.Geometry = Lightning.Geometry.Square(100, 0xffffff, 1);",
                        "",
                        "        //Create a texture from our Geometry shape.",
                        "        let texture: Lightning.Texture = this.game.generateTexture(shape);",
                        "",
                        "        /**",
                        "         * Create our sprite from our texture",
                        "         */",
                        "        let sprite= new Lightning.Sprite(this.game.texture(texture));",
                        "",
                        "        /**",
                        "         * Set our sprites x and y to random positions using Lightning Maths rngInt function",
                        "         * Set our from and to for random spawn area. In this case we use game width/height * 0.1 for a buffer and then game width/height * 0.5 to keep our sprite spawning in this area",
                        "         */",
                        "        sprite.x = Lightning.Maths.rngInt(this.game.width * 0.1, this.game.width * 0.5)",
                        "        sprite.y = Lightning.Maths.rngInt(this.game.height * 0.1, this.game.height * 0.5)",
                        "",
                        "        /**",
                        "         * Set our sprite anchor x and y to 0.5",
                        "         * Add our sprite to the world",
                        "         */",
                        "        sprite.setAnchor(0.5);",
                        "        this.add(sprite);",
                        "",
                        "    }",
                        "}"
                    ]
                }
            ],
            "scriptSrc": "game.js",
            "url": "maths/random-spawn",
            "parent": "maths"
        }
    ],
    "particle-emitter": [
        {
            "name": "Alpha Increment",
            "uri": "alpha-increment",
            "version": "0.5.1",
            "tabs": [
                {
                    "name": "Info",
                    "id": "info",
                    "desc": "",
                    "src_file": "info.txt",
                    "language": "markdown",
                    "value": [
                        "Here is some text.",
                        "Lets go ahead and populate some stuff here.",
                        "You will want to do:",
                        "A.",
                        "B.",
                        "C.",
                        "    1.",
                        "    2.",
                        "D."
                    ]
                },
                {
                    "name": "Game State",
                    "id": "game-state",
                    "desc": "",
                    "src_file": "src/ts/scenes/game.ts",
                    "language": "typescript",
                    "value": [
                        "export default class GameScene extends Lightning.Scene {",
                        "    ",
                        "    protected particleEmitter:Lightning.ParticleEmitter",
                        "",
                        "    create() {",
                        "        // create new particle emitter",
                        "        this.particleEmitter = new Lightning.ParticleEmitter(this, this.game.center.x, this.game.center.y);",
                        "",
                        "        // add the particle emitter to this stage",
                        "        this.add(this.particleEmitter);",
                        "",
                        "        // generate a texture for the particle emitter",
                        "        let texture = <Lightning.Texture>Lightning.Geometry.Rect(8, 8, 0xffffff, 1, true);",
                        "",
                        "        // add that texture to the particle emitter",
                        "        this.particleEmitter.add(texture);",
                        "",
                        "        // set the alpha incrementor range from -0.01, to -0.03",
                        "        this.particleEmitter.setAlphaIncrement(-0.01, -0.03);",
                        "",
                        "",
                        "        // adjust the gravity and velocity range for this demo (not nesessary)",
                        "        this.particleEmitter.setGravity(0, 0);",
                        "        this.particleEmitter.setVelocityRange(-3, 3, -3, 3);",
                        "",
                        "        // // start the particle emitter (not passing any parameters will make it run indefinitly)",
                        "        this.particleEmitter.start();",
                        "    }",
                        "}"
                    ]
                }
            ],
            "scriptSrc": "game.js",
            "thumb": "/examples/particle-emitter/alpha-increment/thumb.png",
            "url": "particle-emitter/alpha-increment",
            "parent": "particle-emitter"
        },
        {
            "name": "Basic",
            "uri": "basic",
            "thumb": "/examples/particle-emitter/basic/thumb.png",
            "version": "0.5.1",
            "tabs": [
                {
                    "name": "Info",
                    "id": "info",
                    "desc": "",
                    "src_file": "info.txt",
                    "language": "markdown",
                    "value": [
                        "Here is some text.",
                        "Lets go ahead and populate some stuff here.",
                        "You will want to do:",
                        "A.",
                        "B.",
                        "C.",
                        "    1.",
                        "    2.",
                        "D."
                    ]
                },
                {
                    "name": "Game State",
                    "id": "game-state",
                    "desc": "",
                    "src_file": "src/ts/scenes/game.ts",
                    "language": "typescript",
                    "value": [
                        "export default class GameScene extends Lightning.Scene {",
                        "",
                        "    protected particleEmitter:Lightning.ParticleEmitter",
                        "    ",
                        "    create() {",
                        "        // create new particle emitter",
                        "        this.particleEmitter = new Lightning.ParticleEmitter(this, this.game.center.x, this.game.center.y);",
                        "",
                        "        // add the particle emitter to this stage",
                        "        this.add(this.particleEmitter);",
                        "",
                        "        // make a new texture from the geomerty class",
                        "        let texture = <Lightning.Texture>Lightning.Geometry.Circle(5, 0xffffff, 1, true);",
                        "",
                        "        // add that texture to the particle emitter",
                        "        this.particleEmitter.add(texture);",
                        "",
                        "        // start the particle emitter (not passing any parameters will make it run indefinitly)",
                        "        this.particleEmitter.start();",
                        "    }",
                        "}"
                    ]
                }
            ],
            "scriptSrc": "game.js",
            "url": "particle-emitter/basic",
            "parent": "particle-emitter"
        },
        {
            "name": "Debug",
            "uri": "debug",
            "version": "0.5.1",
            "tabs": [
                {
                    "name": "Info",
                    "id": "info",
                    "desc": "",
                    "src_file": "info.txt",
                    "language": "markdown",
                    "value": [
                        "Here is some text.",
                        "Lets go ahead and populate some stuff here.",
                        "You will want to do:",
                        "A.",
                        "B.",
                        "C.",
                        "    1.",
                        "    2.",
                        "D."
                    ]
                },
                {
                    "name": "Game State",
                    "id": "game-state",
                    "desc": "",
                    "src_file": "src/ts/scenes/game.ts",
                    "language": "typescript",
                    "value": [
                        "export default class GameScene extends Lightning.Scene {",
                        "",
                        "    protected particleEmitter:Lightning.ParticleEmitter",
                        "    ",
                        "    create() {",
                        "        // create new particle emitter",
                        "        this.particleEmitter = new Lightning.ParticleEmitter(this, this.game.center.x, this.game.center.y / 2);",
                        "",
                        "        // add the particle emitter to this stage",
                        "        this.add(this.particleEmitter);",
                        "",
                        "        // make a new shape and texture",
                        "        let texture:Lightning.Texture = this.game.texture(Lightning.Geometry.Circle(5));",
                        "",
                        "        // add that texture to the particle emitter",
                        "        this.particleEmitter.add(texture);",
                        "",
                        "        // We will create 50 new particles on every emit",
                        "        this.particleEmitter.setStrength(50);",
                        "",
                        "        // enable the debug module",
                        "        this.particleEmitter.enableDebug();",
                        "",
                        "        // start the particle emitter (not passing any parameters will make it run indefinitly)",
                        "        this.particleEmitter.start();",
                        "    }",
                        "}"
                    ]
                }
            ],
            "scriptSrc": "game.js",
            "thumb": "/examples/particle-emitter/debug/thumb.png",
            "url": "particle-emitter/debug",
            "parent": "particle-emitter"
        },
        {
            "name": "Destroy",
            "uri": "destroy",
            "version": "0.5.1",
            "tabs": [
                {
                    "name": "Info",
                    "id": "info",
                    "desc": "",
                    "src_file": "info.txt",
                    "language": "markdown",
                    "value": [
                        "Here is some text.",
                        "Lets go ahead and populate some stuff here.",
                        "You will want to do:",
                        "A.",
                        "B.",
                        "C.",
                        "    1.",
                        "    2.",
                        "D."
                    ]
                },
                {
                    "name": "Game State",
                    "id": "game-state",
                    "desc": "",
                    "src_file": "src/ts/scenes/game.ts",
                    "language": "typescript",
                    "value": [
                        "export default class GameScene extends Lightning.Scene {",
                        "",
                        "protected particleEmitter:Lightning.ParticleEmitter",
                        "",
                        "    create() {",
                        "        // create new particle emitter",
                        "        this.particleEmitter = new Lightning.ParticleEmitter(this, this.game.center.x, this.game.center.y);",
                        "",
                        "        // add the particle emitter to this stage",
                        "        this.add(this.particleEmitter);",
                        "",
                        "        // make a new texture from the geomerty class",
                        "        let texture = this.game.texture(Lightning.Geometry.Circle(5));",
                        "",
                        "        // add that texture to the particle emitter",
                        "        this.particleEmitter.add(texture);",
                        "",
                        "        // start the particle emitter (not passing any parameters will make it run indefinitly)",
                        "        this.particleEmitter.start();",
                        "",
                        "        // destroy the particle emitter after 2500ms",
                        "        setTimeout(() => {",
                        "            this.particleEmitter.destroy();",
                        "        }, 2500)",
                        "    }",
                        "}"
                    ]
                }
            ],
            "scriptSrc": "game.js",
            "thumb": "/examples/particle-emitter/destroy/thumb.png",
            "url": "particle-emitter/destroy",
            "parent": "particle-emitter"
        },
        {
            "name": "Emit Frequency",
            "uri": "emit-frequency",
            "version": "0.5.1",
            "tabs": [
                {
                    "name": "Info",
                    "id": "info",
                    "desc": "",
                    "src_file": "info.txt",
                    "language": "markdown",
                    "value": [
                        "Here is some text.",
                        "Lets go ahead and populate some stuff here.",
                        "You will want to do:",
                        "A.",
                        "B.",
                        "C.",
                        "    1.",
                        "    2.",
                        "D."
                    ]
                },
                {
                    "name": "Game State",
                    "id": "game-state",
                    "desc": "",
                    "src_file": "src/ts/scenes/game.ts",
                    "language": "typescript",
                    "value": [
                        "export default class GameScene extends Lightning.Scene {",
                        "    ",
                        "    protected particleEmitter:Lightning.ParticleEmitter",
                        "",
                        "    create() {",
                        "        // create new particle emitter",
                        "        this.particleEmitter = new Lightning.ParticleEmitter(this, this.game.center.x, this.game.center.y / 2);",
                        "",
                        "        // add the particle emitter to this stage",
                        "        this.add(this.particleEmitter);",
                        "",
                        "        // make a new shape and texture",
                        "        let texture:Lightning.Texture = this.game.texture( Lightning.Geometry.Circle(5) );",
                        "",
                        "        // add that texture to the particle emitter",
                        "        this.particleEmitter.add(texture);",
                        "",
                        "        // Set the emitter to emit every 1000ms",
                        "        this.particleEmitter.setInterval(1000);",
                        "",
                        "        // start the particle emitter (not passing any parameters will make it run indefinitly)",
                        "        this.particleEmitter.start();",
                        "    }",
                        "}"
                    ]
                }
            ],
            "scriptSrc": "game.js",
            "thumb": "/examples/particle-emitter/emit-frequency/thumb.png",
            "url": "particle-emitter/emit-frequency",
            "parent": "particle-emitter"
        },
        {
            "name": "Gravity",
            "uri": "gravity",
            "thumb": "/examples/particle-emitter/gravity/thumb.png",
            "version": "0.5.1",
            "tabs": [
                {
                    "name": "Info",
                    "id": "info",
                    "desc": "",
                    "src_file": "info.txt",
                    "language": "markdown",
                    "value": [
                        "Here is some text.",
                        "Lets go ahead and populate some stuff here.",
                        "You will want to do:",
                        "A.",
                        "B.",
                        "C.",
                        "    1.",
                        "    2.",
                        "D."
                    ]
                },
                {
                    "name": "Game State",
                    "id": "game-state",
                    "desc": "",
                    "src_file": "src/ts/scenes/game.ts",
                    "language": "typescript",
                    "value": [
                        "export default class GameScene extends Lightning.Scene {",
                        "        ",
                        "    protected particleEmitter:Lightning.ParticleEmitter",
                        "    ",
                        "    create() {",
                        "        // create new particle emitter",
                        "        this.particleEmitter = new Lightning.ParticleEmitter(this, this.game.width * 0.75, this.game.center.y);",
                        "",
                        "        // add the particle emitter to this stage",
                        "        this.add(this.particleEmitter);",
                        "",
                        "        // make a new shape and texture",
                        "        let texture:Lightning.Texture = this.game.generateTexture( Lightning.Geometry.Circle(5) );",
                        "",
                        "        // add that texture to the particle emitter",
                        "        this.particleEmitter.add(texture);",
                        "",
                        "        // Set the gravity to drag left and down",
                        "        this.particleEmitter.setGravity(-0.2, 0.2);",
                        "",
                        "        // start the particle emitter (not passing any parameters will make it run indefinitly)",
                        "        this.particleEmitter.start();",
                        "    }",
                        "}"
                    ]
                }
            ],
            "scriptSrc": "game.js",
            "url": "particle-emitter/gravity",
            "parent": "particle-emitter"
        },
        {
            "name": "Multiple Textures",
            "uri": "multiple-textures",
            "version": "0.5.1",
            "tabs": [
                {
                    "name": "Info",
                    "id": "info",
                    "desc": "",
                    "src_file": "info.txt",
                    "language": "markdown",
                    "value": [
                        "Here is some text.",
                        "Lets go ahead and populate some stuff here.",
                        "You will want to do:",
                        "A.",
                        "B.",
                        "C.",
                        "    1.",
                        "    2.",
                        "D."
                    ]
                },
                {
                    "name": "Game State",
                    "id": "game-state",
                    "desc": "",
                    "src_file": "src/ts/scenes/game.ts",
                    "language": "typescript",
                    "value": [
                        "export default class GameScene extends Lightning.Scene {",
                        "",
                        "    protected particleEmitter:Lightning.ParticleEmitter",
                        "    ",
                        "    create() {",
                        "        // create new particle emitter",
                        "        this.particleEmitter = new Lightning.ParticleEmitter(this, this.game.center.x, this.game.center.y);",
                        "",
                        "        // add the particle emitter to this stage",
                        "        this.add(this.particleEmitter);",
                        "",
                        "        // generate a rectangle texture for the particle emitter",
                        "        let rect = Lightning.Geometry.Rect(3, 10);",
                        "        let rectTexture = this.game.texture(rect);",
                        "",
                        "        // generate a circle texture for the particle emitter",
                        "        let circle = Lightning.Geometry.Circle(8);",
                        "        let circleTexture = this.game.texture(circle);",
                        "",
                        "        // add both textures to the particle emitter",
                        "        this.particleEmitter.add(rectTexture, circleTexture);",
                        "",
                        "        /**",
                        "         * -- OR --",
                        "         * this.particleEmitter.add(rectTexture);",
                        "         * this.particleEmitter.add(circleTexture);",
                        "         */",
                        "",
                        "        // start the particle emitter (not passing any parameters will make it run indefinitely)",
                        "        this.particleEmitter.start();",
                        "    }",
                        "}"
                    ]
                }
            ],
            "scriptSrc": "game.js",
            "thumb": "/examples/particle-emitter/multiple-textures/thumb.png",
            "url": "particle-emitter/multiple-textures",
            "parent": "particle-emitter"
        },
        {
            "name": "Scale Increment",
            "uri": "scale-increment",
            "version": "0.5.1",
            "tabs": [
                {
                    "name": "Info",
                    "id": "info",
                    "desc": "",
                    "src_file": "info.txt",
                    "language": "markdown",
                    "value": [
                        "Here is some text.",
                        "Lets go ahead and populate some stuff here.",
                        "You will want to do:",
                        "A.",
                        "B.",
                        "C.",
                        "    1.",
                        "    2.",
                        "D."
                    ]
                },
                {
                    "name": "Game State",
                    "id": "game-state",
                    "desc": "",
                    "src_file": "src/ts/scenes/game.ts",
                    "language": "typescript",
                    "value": [
                        "export default class GameScene extends Lightning.Scene {",
                        "",
                        "    protected particleEmitter:Lightning.ParticleEmitter",
                        "",
                        "    create() {",
                        "        // create new particle emitter",
                        "        this.particleEmitter = new Lightning.ParticleEmitter(this, this.game.center.x, this.game.center.y);",
                        "",
                        "        // add the particle emitter to this stage",
                        "        this.add(this.particleEmitter);",
                        "",
                        "        // generate a texture for the particle emitter",
                        "        let texture:Lightning.Texture = this.game.texture(Lightning.Geometry.Triangle(15, 15));",
                        "",
                        "        // add that texture to the particle emitter",
                        "        this.particleEmitter.add(texture);",
                        "",
                        "        // set the increment range at which the scale gets increased",
                        "        this.particleEmitter.setScaleIncrement(0.005, 0.02);",
                        "",
                        "        // adjust the gravity and velocity range for this demo (not nesessary)",
                        "        this.particleEmitter.setGravity(0, 0);",
                        "        this.particleEmitter.setVelocityRange(-3, 3, -3, 3);",
                        "",
                        "        // start the particle emitter (not passing any parameters will make it run indefinitly)",
                        "        this.particleEmitter.start();",
                        "    }",
                        "}"
                    ]
                }
            ],
            "scriptSrc": "game.js",
            "thumb": "/examples/particle-emitter/scale-increment/thumb.png",
            "url": "particle-emitter/scale-increment",
            "parent": "particle-emitter"
        },
        {
            "name": "Spread Ranges",
            "uri": "spread-ranges",
            "thumb": "/examples/particle-emitter/spread-ranges/thumb.png",
            "version": "0.5.1",
            "tabs": [
                {
                    "name": "Info",
                    "id": "info",
                    "desc": "",
                    "src_file": "info.txt",
                    "language": "markdown",
                    "value": [
                        "Here is some text.",
                        "Lets go ahead and populate some stuff here.",
                        "You will want to do:",
                        "A.",
                        "B.",
                        "C.",
                        "    1.",
                        "    2.",
                        "D."
                    ]
                },
                {
                    "name": "Game State",
                    "id": "game-state",
                    "desc": "",
                    "src_file": "src/ts/scenes/game.ts",
                    "language": "typescript",
                    "value": [
                        "export default class GameScene extends Lightning.Scene {",
                        "",
                        "    public create() {",
                        "        // infinite looping",
                        "        let cube:Lightning.Sprite = new Lightning.Sprite(<Lightning.Texture>Lightning.Geometry.Square(50, 0xff2200));",
                        "        this.add(cube);",
                        "",
                        "        let tween:Lightning.Tween = this.game.tweens.create(cube);",
                        "        tween.createAnim(0, 250, 500, 'y', Lightning.Easing.ExpoInOut);",
                        "",
                        "        tween.subscribe('start', () => {",
                        "            console.log('tween started');",
                        "        });",
                        "",
                        "        tween.subscribe('complete', () => {",
                        "            console.log('tween completed');",
                        "        });",
                        "",
                        "        tween.start();",
                        "",
                        "        /**",
                        "         * Full list of events:",
                        "         * start",
                        "         * pause",
                        "         * tick",
                        "         * loop",
                        "         * complete",
                        "         * reset",
                        "         * destroy",
                        "         */",
                        "    }",
                        "}"
                    ]
                }
            ],
            "scriptSrc": "game.js",
            "url": "particle-emitter/spread-ranges",
            "parent": "particle-emitter"
        },
        {
            "name": "Strength",
            "uri": "strength",
            "version": "0.5.1",
            "tabs": [
                {
                    "name": "Info",
                    "id": "info",
                    "desc": "",
                    "src_file": "info.txt",
                    "language": "markdown",
                    "value": [
                        "Here is some text.",
                        "Lets go ahead and populate some stuff here.",
                        "You will want to do:",
                        "A.",
                        "B.",
                        "C.",
                        "    1.",
                        "    2.",
                        "D."
                    ]
                },
                {
                    "name": "Game State",
                    "id": "game-state",
                    "desc": "",
                    "src_file": "src/ts/scenes/game.ts",
                    "language": "typescript",
                    "value": [
                        "export default class GameScene extends Lightning.Scene {",
                        "",
                        "    public create() {",
                        "        // infinite looping",
                        "        let cube:Lightning.Sprite = new Lightning.Sprite(<Lightning.Texture>Lightning.Geometry.Square(50, 0xff2200));",
                        "        this.add(cube);",
                        "",
                        "        let tween:Lightning.Tween = this.game.tweens.create(cube);",
                        "        tween.createAnim(0, 250, 500, 'y', Lightning.Easing.ExpoInOut);",
                        "",
                        "        tween.subscribe('start', () => {",
                        "            console.log('tween started');",
                        "        });",
                        "",
                        "        tween.subscribe('complete', () => {",
                        "            console.log('tween completed');",
                        "        });",
                        "",
                        "        tween.start();",
                        "",
                        "        /**",
                        "         * Full list of events:",
                        "         * start",
                        "         * pause",
                        "         * tick",
                        "         * loop",
                        "         * complete",
                        "         * reset",
                        "         * destroy",
                        "         */",
                        "    }",
                        "}"
                    ]
                }
            ],
            "scriptSrc": "game.js",
            "thumb": "/examples/particle-emitter/strength/thumb.png",
            "url": "particle-emitter/strength",
            "parent": "particle-emitter"
        },
        {
            "name": "Velocity Ranges",
            "uri": "velocity-ranges",
            "version": "0.5.1",
            "tabs": [
                {
                    "name": "Info",
                    "id": "info",
                    "desc": "",
                    "src_file": "info.txt",
                    "language": "markdown",
                    "value": [
                        "Here is some text.",
                        "Lets go ahead and populate some stuff here.",
                        "You will want to do:",
                        "A.",
                        "B.",
                        "C.",
                        "    1.",
                        "    2.",
                        "D."
                    ]
                },
                {
                    "name": "Game State",
                    "id": "game-state",
                    "desc": "",
                    "src_file": "src/ts/scenes/game.ts",
                    "language": "typescript",
                    "value": [
                        "export default class GameScene extends Lightning.Scene {",
                        "",
                        "    public create() {",
                        "        // infinite looping",
                        "        let cube:Lightning.Sprite = new Lightning.Sprite(<Lightning.Texture>Lightning.Geometry.Square(50, 0xff2200));",
                        "        this.add(cube);",
                        "",
                        "        let tween:Lightning.Tween = this.game.tweens.create(cube);",
                        "        tween.createAnim(0, 250, 500, 'y', Lightning.Easing.ExpoInOut);",
                        "",
                        "        tween.subscribe('start', () => {",
                        "            console.log('tween started');",
                        "        });",
                        "",
                        "        tween.subscribe('complete', () => {",
                        "            console.log('tween completed');",
                        "        });",
                        "",
                        "        tween.start();",
                        "",
                        "        /**",
                        "         * Full list of events:",
                        "         * start",
                        "         * pause",
                        "         * tick",
                        "         * loop",
                        "         * complete",
                        "         * reset",
                        "         * destroy",
                        "         */",
                        "    }",
                        "}"
                    ]
                }
            ],
            "scriptSrc": "game.js",
            "thumb": "/examples/particle-emitter/velocity-ranges/thumb.png",
            "url": "particle-emitter/velocity-ranges",
            "parent": "particle-emitter"
        }
    ],
    "sprites": [
        {
            "name": "Add Child",
            "uri": "add-child",
            "thumb": "/examples/sprites/add-child/thumb.png",
            "version": "0.5.1",
            "tabs": [
                {
                    "name": "Info",
                    "id": "info",
                    "desc": "",
                    "src_file": "info.txt",
                    "language": "markdown",
                    "value": [
                        "Here is some text.",
                        "Lets go ahead and populate some stuff here.",
                        "You will want to do:",
                        "A.",
                        "B.",
                        "C.",
                        "    1.",
                        "    2.",
                        "D."
                    ]
                },
                {
                    "name": "Game State",
                    "id": "game-state",
                    "desc": "",
                    "src_file": "src/ts/scenes/game.ts",
                    "language": "typescript",
                    "value": [
                        "export default class GameScene extends Lightning.Scene {",
                        "",
                        "    public create() {",
                        "        //Define graphics",
                        "        let graphics: Lightning.Graphics = Lightning.Geometry.Square(100, 0xffffff);",
                        "",
                        "        //Create a texture from our graphics opject",
                        "        let texture: Lightning.Texture = graphics.generateCanvasTexture();",
                        "",
                        "        //Create sprite from our texture and set our x and y positions",
                        "        let sprite:Lightning.Sprite = new Lightning.Sprite(texture);",
                        "        sprite.x = this.game.center.x;",
                        "        sprite.y = this.game.center.y;",
                        "",
                        "        //Create our second sprite from our texture and set our x and y positions",
                        "        let sprite2: Lightning.Sprite = new Lightning.Sprite(texture);",
                        "        // sprite2.x = this.game.center.x * 0.7;",
                        "        // sprite2.y = this.game.center.y * 0.95;",
                        "        sprite2.setScale(0.5);",
                        "        sprite2.tint = 0x000000;",
                        "        sprite2.x = 10;",
                        "        sprite2.y = 10;",
                        "",
                        "        //Add our First to our game world.",
                        "        sprite.addChild(sprite2);",
                        "",
                        "        //Add our Second to our game world.",
                        "        this.add(sprite);",
                        "    }",
                        "}"
                    ]
                }
            ],
            "scriptSrc": "game.js",
            "url": "sprites/add-child",
            "parent": "sprites"
        },
        {
            "name": "Alpha",
            "uri": "alpha",
            "thumb": "/examples/sprites/alpha/thumb.png",
            "version": "0.5.1",
            "tabs": [
                {
                    "name": "Info",
                    "id": "info",
                    "desc": "",
                    "src_file": "info.txt",
                    "language": "markdown",
                    "value": [
                        "Here is some text.",
                        "Lets go ahead and populate some stuff here.",
                        "You will want to do:",
                        "A.",
                        "B.",
                        "C.",
                        "    1.",
                        "    2.",
                        "D."
                    ]
                },
                {
                    "name": "Game State",
                    "id": "game-state",
                    "desc": "",
                    "src_file": "src/ts/scenes/game.ts",
                    "language": "typescript",
                    "value": [
                        "export default class GameScene extends Lightning.Scene {",
                        "",
                        "    public create() {",
                        "        //Define graphics",
                        "        let graphics: Lightning.Graphics = Lightning.Geometry.Square(100, 0xffffff);",
                        "",
                        "        //Create a texture from our graphics opject",
                        "        let texture: Lightning.Texture = graphics.generateCanvasTexture();",
                        "",
                        "        //Create sprite from our texture and set our x and y positions",
                        "        let sprite: Lightning.Sprite = new Lightning.Sprite(texture);",
                        "        sprite.x = this.game.center.x;",
                        "        sprite.y = this.game.center.y;",
                        "",
                        "        //Create our second sprite from our texture and set our x and y positions",
                        "        let sprite2: Lightning.Sprite = new Lightning.Sprite(texture);",
                        "        sprite2.x = this.game.center.x * 0.7;",
                        "        sprite2.y = this.game.center.y;",
                        "",
                        "        //Set our alpha to 0.3",
                        "        sprite2.alpha = 0.3;",
                        "",
                        "        //Add our First to our game world.",
                        "        this.add(sprite);",
                        "",
                        "        //Add our Second to our game world.",
                        "        this.add(sprite2);",
                        "    }",
                        "}"
                    ]
                }
            ],
            "scriptSrc": "game.js",
            "url": "sprites/alpha",
            "parent": "sprites"
        },
        {
            "name": "Create",
            "uri": "create",
            "thumb": "/examples/sprites/create/thumb.png",
            "version": "0.5.1",
            "tabs": [
                {
                    "name": "Info",
                    "id": "info",
                    "desc": "",
                    "src_file": "info.txt",
                    "language": "markdown",
                    "value": [
                        "Here is some text.",
                        "Lets go ahead and populate some stuff here.",
                        "You will want to do:",
                        "A.",
                        "B.",
                        "C.",
                        "    1.",
                        "    2.",
                        "D."
                    ]
                },
                {
                    "name": "Game State",
                    "id": "game-state",
                    "desc": "",
                    "src_file": "src/ts/scenes/game.ts",
                    "language": "typescript",
                    "value": [
                        "export default class GameScene extends Lightning.Scene {",
                        "",
                        "    public create() {",
                        "        //Define graphics",
                        "        let graphics:Lightning.Graphics = Lightning.Geometry.Square(50, 0xffffff);",
                        "",
                        "        //Create a texture from our graphics opject",
                        "        let texture:Lightning.Texture = graphics.generateCanvasTexture();",
                        "",
                        "        //Create sprite from our texture and set our x and y positions",
                        "        let sprite:Lightning.Sprite = new Lightning.Sprite(texture);",
                        "        sprite.x = this.game.center.x;",
                        "        sprite.y = this.game.center.y;",
                        "",
                        "        //Add our sprite to our game world.",
                        "        this.add(sprite);",
                        "    }",
                        "}"
                    ]
                }
            ],
            "scriptSrc": "game.js",
            "url": "sprites/create",
            "parent": "sprites"
        },
        {
            "name": "Destroy",
            "uri": "destroy",
            "thumb": "/examples/sprites/destroy/thumb.png",
            "version": "0.5.1",
            "tabs": [
                {
                    "name": "Info",
                    "id": "info",
                    "desc": "",
                    "src_file": "info.txt",
                    "language": "markdown",
                    "value": [
                        "Here is some text.",
                        "Lets go ahead and populate some stuff here.",
                        "You will want to do:",
                        "A.",
                        "B.",
                        "C.",
                        "    1.",
                        "    2.",
                        "D."
                    ]
                },
                {
                    "name": "Game State",
                    "id": "game-state",
                    "desc": "",
                    "src_file": "src/ts/scenes/game.ts",
                    "language": "typescript",
                    "value": [
                        "export default class GameScene extends Lightning.Scene {",
                        "",
                        "    public create() {",
                        "        //Define graphics",
                        "        let graphics: Lightning.Graphics = Lightning.Geometry.Square(100, 0xffffff);",
                        "",
                        "        //Create a texture from our graphics opject",
                        "        let texture: Lightning.Texture = graphics.generateCanvasTexture();",
                        "",
                        "        //Create sprite from our texture and set our x and y positions",
                        "        let sprite: Lightning.Sprite = new Lightning.Sprite(texture);",
                        "        sprite.x = this.game.center.x;",
                        "        sprite.y = this.game.center.y;",
                        "",
                        "        //Add our sprite to our game world.",
                        "        this.add(sprite);",
                        "",
                        "        //Set a timeout for 2000ms which then destroys our sprite.",
                        "        setTimeout(() => {",
                        "            sprite.destroy();",
                        "        }, 2000);",
                        "    }",
                        "}"
                    ]
                }
            ],
            "scriptSrc": "game.js",
            "url": "sprites/destroy",
            "parent": "sprites"
        },
        {
            "name": "Random Spawn",
            "uri": "random-spawn",
            "thumb": "/examples/sprites/random-spawn/thumb.png",
            "version": "0.5.1",
            "tabs": [
                {
                    "name": "Info",
                    "id": "info",
                    "desc": "",
                    "src_file": "info.txt",
                    "language": "markdown",
                    "value": [
                        "Here is some text.",
                        "Lets go ahead and populate some stuff here.",
                        "You will want to do:",
                        "A.",
                        "B.",
                        "C.",
                        "    1.",
                        "    2.",
                        "D."
                    ]
                },
                {
                    "name": "Game State",
                    "id": "game-state",
                    "desc": "",
                    "src_file": "src/ts/scenes/game.ts",
                    "language": "typescript",
                    "value": [
                        "export default class GameScene extends Lightning.Scene {",
                        "",
                        "    public create() {",
                        "        //Define graphics",
                        "        let graphics: Lightning.Graphics = Lightning.Geometry.Square(100, 0xffffff);",
                        "",
                        "        //Create a texture from our graphics opject",
                        "        let texture: Lightning.Texture = graphics.generateCanvasTexture();",
                        "",
                        "",
                        "        /**",
                        "         * Create some text at top of screen to state a refresh is needed to show a spawn change.",
                        "         */",
                        "        let text:Lightning.Text = new Lightning.Text('Refresh to change spawn', <any>{fontSize: 32, fill: 0xffffff});",
                        "        text.x = this.game.center.x;",
                        "        text.y = this.game.height * 0.1;",
                        "        this.add(text);",
                        "",
                        "        //Create sprite from our texture",
                        "        let sprite:Lightning.Sprite = new Lightning.Sprite(texture);",
                        "",
                        "        /**",
                        "         * Set our sprites x and y positions to a random position using our Maths.rngInt functionality",
                        "         * In the rndInt function pass a FROM position and TO position in our case it will be 0 for both the x and y and then width/height * 0.5 which will be half the width/height of our game world.",
                        "         */",
                        "        sprite.x = Lightning.Maths.rngInt(0, this.game.width * 0.5);",
                        "        sprite.y = Lightning.Maths.rngInt(0, this.game.height * 0.5);",
                        "",
                        "        //Add our Second to our game world.",
                        "        this.add(sprite);",
                        "    }",
                        "}"
                    ]
                }
            ],
            "scriptSrc": "game.js",
            "url": "sprites/random-spawn",
            "parent": "sprites"
        },
        {
            "name": "Rotation",
            "uri": "rotation",
            "thumb": "/examples/sprites/rotation/thumb.png",
            "version": "0.5.1",
            "tabs": [
                {
                    "name": "Info",
                    "id": "info",
                    "desc": "",
                    "src_file": "info.txt",
                    "language": "markdown",
                    "value": [
                        "Here is some text.",
                        "Lets go ahead and populate some stuff here.",
                        "You will want to do:",
                        "A.",
                        "B.",
                        "C.",
                        "    1.",
                        "    2.",
                        "D."
                    ]
                },
                {
                    "name": "Game State",
                    "id": "game-state",
                    "desc": "",
                    "src_file": "src/ts/scenes/game.ts",
                    "language": "typescript",
                    "value": [
                        "export default class GameScene extends Lightning.Scene {",
                        "",
                        "    private _sprite2:Lightning.Sprite;",
                        "",
                        "    public create() {",
                        "        //Define graphics",
                        "        let graphics: Lightning.Graphics = Lightning.Geometry.Square(100, 0xffffff);",
                        "",
                        "        //Create a texture from our graphics opject",
                        "        let texture: Lightning.Texture = graphics.generateCanvasTexture();",
                        "",
                        "        //Create sprite from our texture and set our x and y positions",
                        "        let sprite:Lightning.Sprite = new Lightning.Sprite(texture);",
                        "        sprite.setAnchor(0.5)",
                        "        sprite.x = this.game.center.x;",
                        "        sprite.y = this.game.center.y;",
                        "",
                        "        //Create our second sprite from our texture and set our x and y positions",
                        "         this._sprite2 = new Lightning.Sprite(texture);",
                        "         this._sprite2.setAnchor(0.5);",
                        "         this._sprite2.x = this.game.center.x * 0.7;",
                        "         this._sprite2.y = this.game.center.y;",
                        "",
                        "        //Set our second sprites rotation. PLEASE NOTE rotation is measured in radians, here we are using our built in Maths function to convert degrees to radians",
                        "        ",
                        "",
                        "        //Add our First to our game world.",
                        "        this.add(sprite);",
                        "",
                        "        //Add our Second to our game world.",
                        "        this.add(this._sprite2);",
                        "    }",
                        "",
                        "    update() {",
                        "        this._sprite2.rotation += Lightning.Maths.degreesToRadians(2);",
                        "    }",
                        "}"
                    ]
                }
            ],
            "scriptSrc": "game.js",
            "url": "sprites/rotation",
            "parent": "sprites"
        },
        {
            "name": "Scale",
            "uri": "scale",
            "thumb": "/examples/sprites/scale/thumb.png",
            "version": "0.5.1",
            "tabs": [
                {
                    "name": "Info",
                    "id": "info",
                    "desc": "",
                    "src_file": "info.txt",
                    "language": "markdown",
                    "value": [
                        "Here is some text.",
                        "Lets go ahead and populate some stuff here.",
                        "You will want to do:",
                        "A.",
                        "B.",
                        "C.",
                        "    1.",
                        "    2.",
                        "D."
                    ]
                },
                {
                    "name": "Game State",
                    "id": "game-state",
                    "desc": "",
                    "src_file": "src/ts/scenes/game.ts",
                    "language": "typescript",
                    "value": [
                        "export default class GameScene extends Lightning.Scene {",
                        "",
                        "    public create() {",
                        "        //Define graphics",
                        "        let graphics: Lightning.Graphics = Lightning.Geometry.Square(100, 0xffffff);",
                        "",
                        "        //Create a texture from our graphics opject",
                        "        let texture: Lightning.Texture = graphics.generateCanvasTexture();",
                        "",
                        "        //Create sprite from our texture and set our x and y positions",
                        "        let sprite: Lightning.Sprite = new Lightning.Sprite(texture);",
                        "        sprite.x = this.game.center.x;",
                        "        sprite.y = this.game.center.y;",
                        "",
                        "        //Create our second sprite from our texture and set our x and y positions",
                        "        let sprite2: Lightning.Sprite = new Lightning.Sprite(texture);",
                        "        sprite2.x = this.game.center.x * 0.7;",
                        "        sprite2.y = this.game.center.y;",
                        "",
                        "        //Set our scale of our second sprite to twice its original size.",
                        "        sprite2.setScale(2);",
                        "",
                        "        //Add our First to our game world.",
                        "        this.add(sprite);",
                        "",
                        "        //Add our Second to our game world.",
                        "        this.add(sprite2);",
                        "    }",
                        "}"
                    ]
                }
            ],
            "scriptSrc": "game.js",
            "url": "sprites/scale",
            "parent": "sprites"
        }
    ],
    "text": [
        {
            "name": "Simple Text",
            "uri": "simple-text",
            "thumb": "/examples/text/simple/thumb.png",
            "version": "0.5.1",
            "tabs": [
                {
                    "name": "Info",
                    "id": "info",
                    "desc": "",
                    "src_file": "info.txt",
                    "language": "markdown",
                    "value": [
                        "Here is some text.",
                        "Lets go ahead and populate some stuff here.",
                        "You will want to do:",
                        "A.",
                        "B.",
                        "C.",
                        "    1.",
                        "    2.",
                        "D."
                    ]
                },
                {
                    "name": "Game State",
                    "id": "game-state",
                    "desc": "",
                    "src_file": "src/ts/scenes/game.ts",
                    "language": "typescript",
                    "value": [
                        "export default class GameScene extends Lightning.Scene {",
                        "",
                        "    public create() {",
                        "",
                        "        /**",
                        "         * Create our text using Lightnings built in Text",
                        "         * Pass our string of text",
                        "         * Pass a simple object to set fontSize as well as fill",
                        "         */",
                        "        let text:Lightning.Text = new Lightning.Text(\"Play!\", {fontSize: '128px', fill: '#ffffff'});",
                        "",
                        "        /**",
                        "         * Set our x and y positions to game center",
                        "         * Add our text to the game world.",
                        "         */",
                        "        text.x = this.game.center.x;",
                        "        text.y = this.game.center.y;",
                        "        this.add(text);",
                        "    }",
                        "}"
                    ]
                }
            ],
            "scriptSrc": "game.js",
            "url": "text/simple-text",
            "parent": "text"
        },
        {
            "name": "Text With Style",
            "uri": "text-with-style",
            "thumb": "/examples/text/with-style/thumb.png",
            "version": "0.5.1",
            "tabs": [
                {
                    "name": "Info",
                    "id": "info",
                    "desc": "",
                    "src_file": "info.txt",
                    "language": "markdown",
                    "value": [
                        "Here is some text.",
                        "Lets go ahead and populate some stuff here.",
                        "You will want to do:",
                        "A.",
                        "B.",
                        "C.",
                        "    1.",
                        "    2.",
                        "D."
                    ]
                },
                {
                    "name": "Game State",
                    "id": "game-state",
                    "desc": "",
                    "src_file": "src/ts/scenes/game.ts",
                    "language": "typescript",
                    "value": [
                        "export default class GameScene extends Lightning.Scene {",
                        "",
                        "    public create() {",
                        "",
                        "        let style:Lightning.iTextStyle = {",
                        "            align: 'center'",
                        "        }",
                        "        let text:Lightning.Text = new Lightning.Text(\"Play!\");",
                        "            text.x = this.game.center.x;",
                        "            text.y = this.game.center.y;",
                        "            this.add(text);",
                        "    }",
                        "}"
                    ]
                }
            ],
            "scriptSrc": "game.js",
            "url": "text/text-with-style",
            "parent": "text"
        }
    ],
    "tweens": [
        {
            "name": "Events",
            "uri": "events",
            "thumb": "/examples/tweens/events/thumb.png",
            "version": "0.5.1",
            "tabs": [
                {
                    "name": "Info",
                    "id": "info",
                    "desc": "",
                    "src_file": "info.txt",
                    "language": "markdown",
                    "value": [
                        "Here is some text.",
                        "Lets go ahead and populate some stuff here.",
                        "You will want to do:",
                        "A.",
                        "B.",
                        "C.",
                        "    1.",
                        "    2.",
                        "D."
                    ]
                },
                {
                    "name": "Game State",
                    "id": "game-state",
                    "desc": "",
                    "src_file": "src/ts/scenes/game.ts",
                    "language": "typescript",
                    "value": [
                        "export default class GameScene extends Lightning.Scene {",
                        "",
                        "    public create() {",
                        "        // infinite looping",
                        "        let cube:Lightning.Sprite = new Lightning.Sprite(<Lightning.Texture>Lightning.Geometry.Square(50, 0xff2200));",
                        "        this.add(cube);",
                        "",
                        "        let tween:Lightning.Tween = this.game.tweens.create(cube);",
                        "        tween.createAnim(0, 250, 500, 'y', Lightning.Easing.ExpoInOut);",
                        "",
                        "        tween.subscribe('start', () => {",
                        "            console.log('tween started');",
                        "        });",
                        "",
                        "        tween.subscribe('complete', () => {",
                        "            console.log('tween completed');",
                        "        });",
                        "",
                        "        tween.start();",
                        "",
                        "        /**",
                        "         * Full list of events:",
                        "         * start",
                        "         * pause",
                        "         * tick",
                        "         * loop",
                        "         * complete",
                        "         * reset",
                        "         * destroy",
                        "         */",
                        "    }",
                        "}"
                    ]
                }
            ],
            "scriptSrc": "game.js",
            "url": "tweens/events",
            "parent": "tweens"
        }
    ]
}